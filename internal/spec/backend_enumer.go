// Code generated by "enumer -type Backend -json -text -trimprefix Backend internal/spec/types.go"; DO NOT EDIT.

package spec

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BackendName = "AutoBaoVault"

var _BackendIndex = [...]uint8{0, 4, 7, 12}

const _BackendLowerName = "autobaovault"

func (i Backend) String() string {
	if i < 0 || i >= Backend(len(_BackendIndex)-1) {
		return fmt.Sprintf("Backend(%d)", i)
	}
	return _BackendName[_BackendIndex[i]:_BackendIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BackendNoOp() {
	var x [1]struct{}
	_ = x[BackendAuto-(0)]
	_ = x[BackendBao-(1)]
	_ = x[BackendVault-(2)]
}

var _BackendValues = []Backend{BackendAuto, BackendBao, BackendVault}

var _BackendNameToValueMap = map[string]Backend{
	_BackendName[0:4]:       BackendAuto,
	_BackendLowerName[0:4]:  BackendAuto,
	_BackendName[4:7]:       BackendBao,
	_BackendLowerName[4:7]:  BackendBao,
	_BackendName[7:12]:      BackendVault,
	_BackendLowerName[7:12]: BackendVault,
}

var _BackendNames = []string{
	_BackendName[0:4],
	_BackendName[4:7],
	_BackendName[7:12],
}

// BackendString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BackendString(s string) (Backend, error) {
	if val, ok := _BackendNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BackendNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Backend values", s)
}

// BackendValues returns all values of the enum
func BackendValues() []Backend {
	return _BackendValues
}

// BackendStrings returns a slice of all String values of the enum
func BackendStrings() []string {
	strs := make([]string, len(_BackendNames))
	copy(strs, _BackendNames)
	return strs
}

// IsABackend returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Backend) IsABackend() bool {
	for _, v := range _BackendValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Backend
func (i Backend) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Backend
func (i *Backend) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Backend should be a string, got %s", data)
	}

	var err error
	*i, err = BackendString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Backend
func (i Backend) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Backend
func (i *Backend) UnmarshalText(text []byte) error {
	var err error
	*i, err = BackendString(string(text))
	return err
}
